// Code generated by 'go generate'; DO NOT EDIT.

package api

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modadvapi32 = windows.NewLazySystemDLL("advapi32.dll")

	procGetNamedSecurityInfoW = modadvapi32.NewProc("GetNamedSecurityInfoW")
	procGetSecurityInfo       = modadvapi32.NewProc("GetSecurityInfo")
	procSetNamedSecurityInfoW = modadvapi32.NewProc("SetNamedSecurityInfoW")
	procSetSecurityInfo       = modadvapi32.NewProc("SetSecurityInfo")
)

func GetNamedSecurityInfo(objectName string, objectType int32, secInfo uint32, owner **windows.SID, group **windows.SID, dacl *windows.Handle, sacl *windows.Handle, secDesc *windows.Handle) (rtn error) {
	var _p0 *uint16
	_p0, rtn = syscall.UTF16PtrFromString(objectName)
	if rtn != nil {
		return
	}
	return _GetNamedSecurityInfo(_p0, objectType, secInfo, owner, group, dacl, sacl, secDesc)
}

func _GetNamedSecurityInfo(objectName *uint16, objectType int32, secInfo uint32, owner **windows.SID, group **windows.SID, dacl *windows.Handle, sacl *windows.Handle, secDesc *windows.Handle) (rtn error) {
	r0, _, _ := syscall.Syscall9(procGetNamedSecurityInfoW.Addr(), 8, uintptr(unsafe.Pointer(objectName)), uintptr(objectType), uintptr(secInfo), uintptr(unsafe.Pointer(owner)), uintptr(unsafe.Pointer(group)), uintptr(unsafe.Pointer(dacl)), uintptr(unsafe.Pointer(sacl)), uintptr(unsafe.Pointer(secDesc)), 0)
	if r0 != 0 {
		rtn = syscall.Errno(r0)
	}
	return
}

func GetSecurityInfo(handle windows.Handle, objectType int32, secInfo uint32, owner **windows.SID, group **windows.SID, dacl *windows.Handle, sacl *windows.Handle, secDesc *windows.Handle) (rtn error) {
	r0, _, _ := syscall.Syscall9(procGetSecurityInfo.Addr(), 8, uintptr(handle), uintptr(objectType), uintptr(secInfo), uintptr(unsafe.Pointer(owner)), uintptr(unsafe.Pointer(group)), uintptr(unsafe.Pointer(dacl)), uintptr(unsafe.Pointer(sacl)), uintptr(unsafe.Pointer(secDesc)), 0)
	if r0 != 0 {
		rtn = syscall.Errno(r0)
	}
	return
}

func SetNamedSecurityInfo(objectName string, objectType int32, secInfo uint32, owner *windows.SID, group *windows.SID, dacl windows.Handle, sacl windows.Handle) (rtn error) {
	var _p0 *uint16
	_p0, rtn = syscall.UTF16PtrFromString(objectName)
	if rtn != nil {
		return
	}
	return _SetNamedSecurityInfo(_p0, objectType, secInfo, owner, group, dacl, sacl)
}

func _SetNamedSecurityInfo(objectName *uint16, objectType int32, secInfo uint32, owner *windows.SID, group *windows.SID, dacl windows.Handle, sacl windows.Handle) (rtn error) {
	r0, _, _ := syscall.Syscall9(procSetNamedSecurityInfoW.Addr(), 7, uintptr(unsafe.Pointer(objectName)), uintptr(objectType), uintptr(secInfo), uintptr(unsafe.Pointer(owner)), uintptr(unsafe.Pointer(group)), uintptr(dacl), uintptr(sacl), 0, 0)
	if r0 != 0 {
		rtn = syscall.Errno(r0)
	}
	return
}

func SetSecurityInfo(handle windows.Handle, objectType int32, secInfo uint32, owner *windows.SID, group *windows.SID, dacl windows.Handle, sacl windows.Handle) (rtn error) {
	r0, _, _ := syscall.Syscall9(procSetSecurityInfo.Addr(), 7, uintptr(handle), uintptr(objectType), uintptr(secInfo), uintptr(unsafe.Pointer(owner)), uintptr(unsafe.Pointer(group)), uintptr(dacl), uintptr(sacl), 0, 0)
	if r0 != 0 {
		rtn = syscall.Errno(r0)
	}
	return
}
